function GridController(e,t,r,n,o){"use strict";function a(e){var t=[],a=[],i=[];return Array.isArray(e)&&s.autoColumn!==!1&&e.forEach(function(e){Object.keys(e).forEach(function(r){if(e.hasOwnProperty(r)&&-1===a.indexOf(r)&&"$$hashKey"!==r){var n={};n[s.columnKey]=r,n[s.columnName]=r,t.push(n),a.push(r)}})}),s.state&&Array.isArray(s.state.gridColumns)&&s.state.gridColumns.forEach(function(e){"$$hashKey"!==e[s.columnKey]&&(e.overrideTemplate&&n(e.overrideTemplate).then(function(n){var a=o(n);e.override=function(e,n,o){var l,u,c=s.data.indexOf(o),d=t.length-1,m=(s.state.page-1)*s.state.perPage+c;return i[n[s.columnKey]]&&i[n[s.columnKey]][c]?i[n[s.columnKey]][c]:(l=r.$new(),l.$index=m+e,angular.extend(l,{$colIndex:d,$rowIndex:m,$index:m,cell:e,column:n,row:o}),u=a(l),i[n[s.columnKey]]||(i[n[s.columnKey]]=[]),i[n[s.columnKey]][c]=u,u)}}),-1===a.indexOf(e[s.columnKey])?(t.push(e),a.push(e[s.columnKey])):t.forEach(function(t){t[s.columnKey]===e[s.columnKey]&&Object.keys(e).forEach(function(r){t[r]=e[r]})}))}),t}function i(){var e=s.pagination!==!0&&void 0!==s.pagination?s.pagination:20;s.state=s.state||{sort:void 0,sortDirection:void 0,page:1,perPage:s.pagination!==!1?e:0,gridColumns:[],refresh:!1},s.columnKey=s.columnKey||"name",s.columnName=s.columnName||"header",s.api={refresh:function(){t.log("refresh"),s.getData({state:s.state})}}}var s=this;r.Parent=r.$parent,e(function(){i()}),s.isSortable=function(e){return void 0===e.sortable?!0:e.sortable},s.getValue=function(e,t,r){var n;return n=t.override?t.override(e[t[s.columnKey]],t,e,r):e[t[s.columnKey]]},s.sort=function(e){(void 0===e.sortable||e.sortable)&&(s.state.sort===e[s.columnKey]?"DESC"===s.state.sortDirection?s.state.sortDirection="ASC":(s.state.sort=void 0,s.state.sortDirection=void 0):(s.state.sort=e[s.columnKey],s.state.sortDirection="DESC"))},r.$watch("Grid.state",function(){void 0!==s.state&&s.getData({state:s.state})},!0),r.$watch("Grid.data",function(){s.data=s.data||[],s.columnDefinition=a(s.data),s.rows=s.data},!0)}function NavbarController(e,t,r,n){"use strict";var o=this;o.isActive=function(e){return t.includes(e.activeState||e.name)},n.localStorage&&(o.accountName=n.localStorage.getItem("registeredAccount"),o.accountName&&(o.registered=!0)),o.undoStorage=function(){n.localStorage&&(n.localStorage.setItem("registeredAccount",void 0),o.accountName=void 0,o.registered=!1)},o.registerAccount=function(e){r.get("http://ssf.poeladder.com/signup/"+e).then(function(){o.registered=!0,n.localStorage&&n.localStorage.setItem("registeredAccount",e)})},o.ModuleStates=e}function StatusLightController(){var e=this,t={unknown:"#eee",ok:"#5cb85c",notice:"#feff78",warning:"#f0ad4e",danger:"#d9534f"};e.style={"background-color":t[e.status]||"transparent"}}function ModuleStatesProvider(e){"use strict";var t=[],r=[];this.registerModule=function(n,o){return void 0!==t[n]?void console.warn("Module already registered"):(t.push(n),void o.forEach(function(t){return-1!==r.indexOf(t)?void console.warn("State already registered"):(e.state(t.name,t.state),void r.push(t))}))},this.$get=function(){return r}}function SystemController(e){"use strict";var t=this;t.showingSide=!1,t.showingMenu=!0,t.getAPI=function(t){return e(t)}}function APIFactory(e,t,r,n){"use strict";var o=function i(o){var a=n+o+"/",s=[];this.name=o.charAt(0).toUpperCase()+o.slice(1),this.clearCache=function(){s=[]},this.readAll=function(n){var o=r.defer(),i=n||{};return s&&s[JSON.stringify(i)]&&s[JSON.stringify(i)].timestamp>Date.now()-3e5?(e.debug("up to date cache, using instead"),o.resolve(s[JSON.stringify(i)].rows)):(e.debug("getting fresh data"),t({method:"GET",url:a,params:i}).then(function(e){o.resolve(e.data),s[JSON.stringify(i)]={timestamp:Date.now(),rows:e.data}})),o.promise},this.create=function(e){return t({method:"POST",url:a,data:e})},this.read=function(e){return t({method:"GET",url:a+e})},this.update=function(e){return t({method:"PUT",url:a+e.id,data:e})},this["delete"]=function(e){return t({method:"DELETE",url:a+e.id,data:e})},this.getTableResource=function(t){return function(t){var n,o,a=this,s={};return this.start=0,this.limit=25,Object.defineProperty(this,"order",{get:function(){return n},set:function(t){t!==n&&(e.debug("new order, clearing cache"),n=t,s={})}}),Object.defineProperty(this,"orderBy",{get:function(){return o},set:function(t){t!==o&&(e.debug("new orderby, clearing cache"),o=t,s={})}}),this.get=function(){e.debug(s);var n=r.defer();return void 0!==s[a.limit]&&void 0!==s[a.limit][a.start]?(e.debug(a.limit,a.start,"cached, loading"),n.resolve(s[a.limit][a.start])):(e.debug(a.limit,a.start,"not cached, loading"),i.doTask(t,{start:a.start,limit:a.limit,sort:a.orderBy,dir:a.order}).then(function(e){s[a.limit]=s[a.limit]||{},s[a.limit][a.start]=e,n.resolve(e)},function(e){n.reject(e)})),n.promise},this}(t)}},a={};return function(e){return void 0===a[e]&&(a[e]=new o(e)),a[e]}}function AccountsConfig(e){"use strict";e.registerModule("Accounts",[{showInMenu:!0,menuName:"Accounts",icon:"fa fa-users fa-fw",name:"accounts",priority:0,state:{url:"/accounts",views:{"@":{templateUrl:"modules/accounts/accounts.html",controller:"AccountsController as Accounts"}}}}])}function AccountsController(e,t,r,n){"use strict";function o(){a.total=s.length,i.list=s.slice((a.page-1)*a.perPage,a.page*a.perPage)}var a,i=this,s=[];t.debug(i),n.get("accounts.php").then(function(e){s=e.data,o()});var l=[{header:"Accounts",name:"name",override:function(e,t,r){return'<a href="'+r.account_url+'" target="_blank">'+e+"</a>"}},{name:"account_url",hidden:!0}];i.getAccounts=function(e){var t=e.sort,n=e.sortDirection||"DESC";a=e,s=r("orderBy")(s,t,"DESC"===n),o(),e.gridColumns=l}}function LadderConfig(e){"use strict";e.registerModule("Ladder",[{showInMenu:!0,menuName:"Ladder",icon:"fa fa-bar-chart fa-fw",name:"ladder",priority:0,state:{url:"/",views:{"@":{templateUrl:"modules/ladder/ladder.html",controller:"LadderController as Ladder"}}}}])}function LadderController(e,t,r,n){function o(){var e=r("filter")(s,i.filter);a.total=e.length,i.characters=e.slice((a.page-1)*a.perPage,a.page*a.perPage)}var a,i=this,s=[];e.debug(i),t.get("scraper.php").then(function(e){s=e.data,o()}),t.get("meta.php").then(function(e){i.status=e.data.status,i.lastUpdateTime=e.data.last_ladder_update+"000",i.lastProcessTime=e.data.last_process_time});var l=[{header:"Rank",name:"rank"},{header:"Class",name:"class"},{header:"Level",name:"level"},{header:"Experience",name:"experience"},{header:"Status",name:"status",override:function(e,t,r,n){return"Dead"===e?e:"<status-light status=\"'"+("offline"===e?"danger":"ok")+"'\"></status-light>"}},{header:"Experience gained last hour (Approx.)",name:"experience_last_hour"},{header:"Name",name:"name",override:function(e,t,r){return'<a href="'+r.account_url+'" target="_blank">'+e+"</a>"}},{name:"account_url",hidden:!0}];n.$watch("Ladder.filter",function(e){void 0!==e&&o()}),i.getCharacters=function(e){var t=e.sort||"rank",n=e.sortDirection||"ASC";a=e,"experience"!==t&&"level"!==t||(t=["level","experience"]),s=r("orderBy")(s,t,"DESC"===n),o(),e.gridColumns=l},i.getClassesForRow=function(e){return"Dead"===e.status?"dead":void 0}}function RulesConfig(e){"use strict";e.registerModule("Rules",[{showInMenu:!0,menuName:"Rules",icon:"fa fa-list-ol fa-fw",name:"rules",priority:0,state:{url:"/rules",views:{"@":{templateUrl:"modules/rules/rules.html"}}}}])}function AppConfig(e,t){"use strict";e.otherwise("/"),t.debugEnabled(!0)}GridController.$inject=["$timeout","$log","$scope","$templateRequest","$interpolate"],NavbarController.$inject=["ModuleStates","$state","$http","$window"],SystemController.$inject=["API"],ModuleStatesProvider.$inject=["$stateProvider"],APIFactory.$inject=["$log","$http","$q","APIBaseLocation"],AccountsController.$inject=["System","$log","$filter","$http"],AccountsConfig.$inject=["ModuleStatesProvider"],LadderController.$inject=["$log","$http","$filter","$scope"],LadderConfig.$inject=["ModuleStatesProvider"],RulesConfig.$inject=["ModuleStatesProvider"],AppConfig.$inject=["$urlRouterProvider","$logProvider"],angular.module("mvl.grid",["ui.bootstrap","ngSanitize"]).controller("GridController",GridController).component("grid",{controller:"GridController as Grid",templateUrl:"components/grid/grid.html",bindings:{data:"<",state:"<",getData:"&",columnKey:"@",columnName:"@",autoColumn:"<",pagination:"=?",getClassesForRow:"=",api:"=?"}}).directive("cellValue",["$compile",function(e){"use strict";return function(t,r,n){t.$watch(function(e){return e.$eval(n.cellValue)},function(n){r.html(n),e(r.contents())(t)})}}]),angular.module("poe.navbar",["system","ui.router"]).controller("NavbarController",NavbarController).component("navbar",{controller:"NavbarController as Navbar",templateUrl:"components/navbar/navbar.html"}),angular.module("mvl.statuslight",[]).controller("StatusLightController",StatusLightController).component("statusLight",{controller:"StatusLightController as StatusLight",templateUrl:"components/status-light/status-light.html",bindings:{status:"<"}}),angular.module("system",["ui.router"]).constant("APIBaseLocation","API/").service("System",SystemController).provider("ModuleStates",ModuleStatesProvider).factory("API",APIFactory),angular.module("poe.accounts",["system"]).controller("AccountsController",AccountsController).config(AccountsConfig),angular.module("poe.ladder",["system","ui.bootstrap","mvl.grid","mvl.statuslight"]).controller("LadderController",LadderController).config(LadderConfig).filter("secondsToDateTime",function(){return function(e){if(void 0===e)return e;var t=new Date(0,0,0,0,0,0,0);return t.setSeconds(e),t.getTime()}}),angular.module("poe.rules",[]).config(RulesConfig),angular.module("poeladder",["ui.router","templates","system","poe.navbar","poe.ladder","poe.accounts","poe.rules"]).config(AppConfig);
//# sourceMappingURL=data:application/json;base64,
